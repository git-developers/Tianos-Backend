services:

    tianos.listener.doctrine.role:
        class: Bundle\RoleBundle\EventListener\DoctrineListenerService
        arguments: ["@security.token_storage"]
        tags:
          - { name: doctrine.event_listener, event: postUpdate }
          - { name: doctrine.event_listener, event: preUpdate }
          - { name: doctrine.event_listener, event: prePersist }
          - { name: doctrine.event_listener, event: postLoad }
          - { name: doctrine.event_listener, event: postRemove }

    tianos.api.controller.role:
        class: Bundle\RoleBundle\Controller\ApiController
        arguments: [ Bundle\GridBundle\Factory\RequestConfigurationFactoryInterface ]
        tags:
            - { name: tianos.api.controller.role, alias: tianos.api.controller.role }

    tianos.backend.controller.role:
        class: Bundle\RoleBundle\Controller\BackendController
        arguments: [ Bundle\GridBundle\Factory\RequestConfigurationFactoryInterface ]
        tags:
            - { name: tianos.backend.controller.role, alias: tianos.backend.controller.role }

    tianos.frontend.controller.role:
        class: Bundle\RoleBundle\Controller\FrontendController
        arguments: [ Bundle\GridBundle\Factory\RequestConfigurationFactoryInterface ]
        tags:
            - { name: tianos.frontend.controller.role, alias: tianos.frontend.controller.role }

    tianos.repository.role:
        class: Dummy
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [ Bundle\RoleBundle\Entity\Role ]



#    tianos.controller.grid:
#        class: Bundle\GridBundle\Controller\GridController
#        arguments: [ Bundle\GridBundle\Controller\RequestConfigurationFactoryInterface ]
#        tags:
#            - { name: tianos.controller.grid, alias: tianos.controller.grid }